反射:框架设计的灵魂
框架:半成品软件 可以在框架的基础上进行软件开发 简化编码
定义:将类的各个部分组成封装为其他对象(通过ClassLoader,将成员变量封装为Field对象数组,构造函数封装成为Constructor对象数组,将成员方法封装成为method对象数组) 这就是反射机制
类加载器(classLoader):把Person.class文件加载到内存中去

Reflection(ryo) is a mechanism in a runtime to achieve class, field, constructor, method information from runtime instance.
就是在runtime时候看class里面的属性
比如在我项目里 某一个class并且上面有@Service, 对它的constructor调用，所以spring这个framework一定要用reflection的
根据annotation能找到class
当请求的时候 dispatcher到相应的url和httpMethod找出相应的方法,在controller 根据@RequestMapping做method.invoke()

why use Ref:
(when compile time, we don't know which method to use, so in runtime I use reflection, based on the parameter I get from the front, to decide which method I use)

how do we declare java annotation?
1:java annotation is a interface, a little different it is an annotation interface
   it looks like an interface without any implementation. It just declare what kind of attributes this annotation would contain in future
2: the way we retrieve those information is to use java reflect package, in java reflect package, we can retrieve the info as runtime

三个阶段: Source源代码阶段(在硬盘存储) Class类对象阶段 Runtime运行时阶段

好处:1:程序运行(runtime)过程中 操作(调用任何一个方法)这些对象2:解耦,提高程序的可拓展性(Decoupling, improve the scalability of the program)
缺点: performance overhead, due to reflection involves types are dynamically resolved, so 如果知道我要调用什么方法的时候，请在compile时候写清楚
    reflective operations have slower performance than their non-reflective counterparts.
    should be avoided of code are called frequently in performance sensitive app.
    Security restrictions: Reflection requires a runtime permission which may not be present when running under a security manager.

example: 定义了一个 String str="abc"; str.出现一大堆方法(数组成员)， 因为定义个字符串String,会把字符串的字节码文件(byte code file)加载进内存
        在内存中有一个class类对象(成员变量数组 成员方法数组 构造方法数组)， 在其中已经把所有的方法抽取出来封装成为method对象数组 最后只需要把数组里成员拿出来 展示在列表里就好

字节码文件: .class(第一部分 通过javac编译) 需要把字节码文件加载进内存
class类是用来描述所有字节码文件的
获取Class对象的三种方式:
1:Class.forName("全类名"):将字节码文件加载进内存，返回Class对象
    *多用于配置文件 将类名定义在配置文件中 读取文件 加载类
2:类名.class:通过类名的class属性获取(当没有创建对象的时候)
    *多用于参数传递
3:instance.getClass(): getClass()方法在Object类中定义
    *多用于对象获取字节码的方式

class对象功能
1:获取成员变量们
    Field[] getFields()
    Field getField(String name)
    Field[] getDeclaredFields()
    Field[] getDeclaredField(String name)
2:获取构造方法们
3:获取成员方法们  getMethods()=>获取当前class所有available的methods,and the extends methods
                getDeclaredMethod()=>only get the own methods

4:获取类名称


参考Dependency Injection