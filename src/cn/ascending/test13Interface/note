在JAVA9+中

１　成员变量其实是常量　格式: [public] [static] [final] 数据类型　常量名称＝数据值; 常量名称完全大写　用下划线分隔
２　接口中最重要的是抽象方法　格式: [public] [abstract] 返回值类型　方法名称(参数列表); 实现类必须覆盖重写接口中所有抽象方法　除非实现类是抽象类
３ 从JAVA8+开始　接口中可以定义默认方法　格式　[public] default　返回值类型　方法名称(参数列表){方法体}　默认方法也可以被覆盖重写
４　从JAVA8+开始　接口中可以定义静态方法　格式　[public] static 返回值类型　方法名称(参数列表){方法体}
   应该通过接口名称进行调用 不能通过实现类对象调用接口静态方法
5  从JAVA9+开始　接口中可以定义私有方法
   普通私有方法 private 返回值类型 方法名称(参数列表) {方法体}
   静态私有方法 private static 返回值类型 方法名称(参数列表) {方法体}
   private的方法只有接口自己调用 不能被实现类调用

6 接口不能有静态代码块 接口不能有构造
7 一个类的直接父类是唯一的 但一个类可以同时实现多个接口
  格式: public class MyInterfaceImpl implements MyInterfaceA, MyInterfaceB, MyInterfaceC{}
  覆盖重写所有抽象方法
8 如果实现类所实现的多个接口中，存在重复的抽象方法，那么只需要覆盖重写一次即可
9 如果实现类实现的多个接口中 存在重复的默认方法 实现类一定要对冲突的默认方法进行重写
10 一个类如果直接父类中的方法和接口当中默认方法产生了冲突 优先使用父类当中的方法

11 接口与接口之间是多继承的
12 多个父接口当中的抽象方法如果重复 没关系
13 多个父接口当中的默认方法如果重复 那么子接口必须进行默认方法的覆盖重写，而且要带着default关键字

extends或者 implements 是多态性的前提