*  1:数组:查询快 数组的地址是连续的 通过数组的首地址可以找到数组 通过数组的索引可以快速查找某一个元素
*  增删慢: 数组的长度是固定的(stable) 我们想要增加或者删除一个元素 必须创建一个新数组 把原数组的数据复制过来(Copy the original array to the new array)
*  int[] arr=new int[]{1,2,3,4}   int[] arr=new int[]{1,2,3} 新数组的地址值给arr 原数组会被销毁垃圾回收
*  在堆内存中 频繁创建数组 复制数组中的元素 销毁数组 效率低下
*
*  2:链表结构(linked list):查询慢(链表中的地址不是连续的 每次查询元素 必须开始从头查询)
*    增删快:增加或者删除一个元素 对链表的整体结构没有影响
*    链表中一个元素称为一个节点 一个节点包含一个数据源 和 两个指针(存储地址)
    *    具体分为
    单向链表(one way linked list):它包含两个域，一个信息域和一个指针域。这个链接指向表中的下一个节点，而最后一个节点则指向一个空值NULL
    双向链表(two way linked list):双向链表中不仅有指向后一个节点的指针，还有指向前一个节点的指针。第一个节点的"前连接"指向NULL，最后一个节点的"后连接"指向NULL